name: Gutenberg packages update

on:
  # Allow for the workflow to be manually run if needed.
  workflow_dispatch:
  schedule:
    # Once a day (https://crontab.guru/once-a-day)
    - cron: '0 0 * * *'

jobs:
  check-gutenberg-release:
    name: Check for a new Gutenberg release
    # Only run job if the workflow was triggered via the `schedule` event (which does not have an `event` payload).
    if: ${{ github.event }} != null
    runs-on: ubuntu-latest
    outputs:
      latest-version: ${{ steps.latest-release.outputs.version }}
      should-update: ${{ steps.determine.outputs.should-update }}
    steps:
      - name: Get latest Gutenberg release
        id: latest-release
        run: echo "::set-output name=version::$(gh api -X GET repos/wordpress/gutenberg/releases/latest --jq '.name')"

      - name: Get version from last pull request
        id: last-release
        run: |
          PR_TITLES=$(gh api -X GET search/issues -f q='${{ env.QUERY }}' -f sort='created' -f order='desc' --jq '.items.[].title')
          LAST_VERSION=$(node -e "'$PR_TITLES' && console.log( '$PR_TITLES'.match('v(.+) release') )"
          echo "::set-output name=version::$(echo "$LAST_VERSION")
        env:
          QUERY: 'repo:ampproject/amp-wp is:pr in:title Update Gutenberg packages after'

      - name: Determine if the latest Gutenberg release has already been covered
        id: determine
        run: echo "set-ouput name=new::$(php -r "echo json_encode(version_compare('$LATEST_VER', '$LAST_VER', '>'));")
        env:
          LAST_VER: ${{ steps.last-release.version }}
          LATEST_VER: ${{ steps.latest-release.version }}

  update-packages:
    name: Update Gutenberg packages
    # Run job if there is a new Gutenberg release or if the workflow was triggered manually (in which case
    # `github.event` would be a non-null value).
    if: >
      ${{ needs.check.gutenberg-release.outputs.should-update }} == 'true'  ||
      ${{ github.event }} != null
    runs-on: ubuntu-latest
    needs: check-gutenberg-release
    steps:
      - name: Checkout
        uses: actions/checkout@v2
        with:
          # Fetch history for all branches and tags to allow for successful merge of base branch if needed.
          fetch-depth: 0

      - name: Determine branch name
        id: branches
        run: |
          echo "::set-output name=base::$(echo "$BASE_BRANCH")"
          echo "::set-output name=head::$(echo "update/gutenberg-v$VERSION-packages")"
        env:
          VERSION: ${{ needs.check.gutenberg-release.outputs.latest-version }}

      - name: Read .nvmrc
        run: echo "##[set-output name=NVMRC;]$(cat .nvmrc)"
        id: nvm

      - name: Setup Node
        uses: actions/setup-node@v2
        with:
          node-version: ${{ steps.nvm.outputs.NVMRC }}

      - name: Get npm cache directory
        id: npm-cache
        run: echo "::set-output name=dir::$(npm config get cache)"

      - name: Configure npm cache
        uses: actions/cache@v2
        with:
          path: ${{ steps.npm-cache.outputs.dir }}
          key: ${{ runner.os }}-npm-${{ hashFiles('**/package-lock.json') }}
          restore-keys: |
            ${{ runner.os }}-npm-

      - name: Configure git user
        run: |
          git config user.email "pierregordon@protonmail.com"
          git config user.name "Pierre Gordon"

      - name: Check if remote branch exists
        id: remote-branch
        run: echo ::set-output name=exists::$([[ -z $(git ls-remote --heads origin "$HEAD_BRANCH" ) ]] && echo "0" || echo "1")
        env:
          HEAD_BRANCH: ${{ steps.branches.outputs.head }}

      - name: Create branch to base pull request on
        if: steps.remote-branch.outputs.exists == 0
        run: git checkout -b "$HEAD_BRANCH"
        env:
          HEAD_BRANCH: ${{ steps.branches.outputs.head }}

      - name: Fetch existing branch to add commits to
        if: steps.remote-branch.outputs.exists == 1
        run: |
          git checkout "$HEAD_BRANCH"
          git merge --no-edit "$BASE_BRANCH"
        env:
          BASE_BRANCH: ${{ steps.branches.outputs.base }}
          HEAD_BRANCH: ${{ steps.branches.outputs.head }}

      - name: Install Node dependencies
        run: npm ci
        env:
          CI: true

      - name: Update packages
        run: |
          # Get list of latest package versions.
          PACKAGES=$(npm outdated --parseable | cut -d':' -f 4 | grep @wordpress)
          npm i $(echo "$PACKAGES" | paste -s -d' ')

      - name: Check if there are changes
        id: changes
        run: echo ::set-output name=changed::$([[ -z $(git status --porcelain) ]] && echo "0" || echo "1")

      - name: Commit and push changes
        if: steps.changes.outputs.changed == 1
        run: |
          git add --all .
          git commit -m "Update Gutenberg package dependencies"
          git push origin "$HEAD_BRANCH"
        env:
          HEAD_BRANCH: ${{ steps.branches.outputs.head }}

      - name: Create pull request
        if: steps.changes.outputs.changed == 1 && steps.remote-branch.outputs.exists == 0
        run: |
          git push -u origin "$HEAD_BRANCH"
          gh pr create --base "$BASE_BRANCH" --title "Update Gutenberg packages after v$VERSION release" --body "" --label dependencies
        env:
          VERSION: ${{ needs.check.gutenberg-release.outputs.latest-version }}
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
          BASE_BRANCH: ${{ steps.branches.outputs.base }}
          HEAD_BRANCH: ${{ steps.branches.outputs.head }}
